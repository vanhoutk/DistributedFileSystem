
==================== FINAL INTERFACE ====================
2016-12-28 23:56:54.092322 UTC

interface commonAPIs-0.1.0.0-HG5f3m8j2i08xkd4uhISM:MongoFunctions 8001
  interface hash: 62a44081ed40c1ace2530bac7d85eb3c
  ABI hash: b0b8af4cc3e78a203490859ab3a2659e
  export-list hash: 076335189fb66ee03cacfe348ec825d8
  orphan hash: f7fb9e3bd34af3d40cb1121e34ace059
  flag hash: 232b91cb96073461cf6c3dcd6a42e778
  sig of: Nothing
  used TH splices: False
  where
exports:
  MongoFunctions.defEnv
  MongoFunctions.doLog
  MongoFunctions.drainCursor
  MongoFunctions.iso8601
  MongoFunctions.mongoDbDatabase
  MongoFunctions.mongoDbIp
  MongoFunctions.mongoDbPort
  MongoFunctions.withMongoDbConnection
module dependencies:
package dependencies: MonadRandom-0.4.2.3@MonadRandom-0.4.2.3-8TfCm6PGvGYB7omozORhov
                      array-0.5.1.1@array-0.5.1.1 base-4.9.0.0
                      base16-bytestring-0.1.1.6@base16-bytestring-0.1.1.6-5dPoF8dzhwzBaEB2MvnmIS
                      base64-bytestring-1.0.0.1@base64-bytestring-1.0.0.1-In9M41tLtcS9QYt3QpGpNY
                      binary-0.8.3.0@binary-0.8.3.0
                      bson-0.3.2.3@bson-0.3.2.3-3QA3aP5EtCyCltXUzEKOsQ
                      byteable-0.1.1@byteable-0.1.1-15aIBCArSOBEnGxArzrDTM
                      bytestring-0.10.8.1@bytestring-0.10.8.1
                      cipher-aes-0.2.11@cipher-aes-0.2.11-6IDqXzfBW6B3WK2bKJbiBh
                      containers-0.5.7.1@containers-0.5.7.1
                      cprng-aes-0.6.1@cprng-aes-0.6.1-COLYQrn2KP0KrG5tq2u9OS
                      crypto-cipher-types-0.0.9@crypto-cipher-types-0.0.9-Iwzx9devSK6HQoOjujg46u
                      crypto-random-0.0.9@crypto-random-0.0.9-GQAZIw8UH93GFERaAFFYYo
                      cryptohash-0.11.9@cryptohash-0.11.9-9KNu0EEbreBFrmNJAeHgYz
                      cryptonite-0.19@cryptonite-0.19-G9PYO4oOEqhDTta2u9rAaU
                      data-binary-ieee754-0.4.4@data-binary-ieee754-0.4.4-F1HjhwdV1xx5grS0eMjeg2
                      deepseq-1.4.2.0@deepseq-1.4.2.0
                      exceptions-0.8.3@exceptions-0.8.3-7py7fmRxowDFpHmiHGKrTb
                      ghc-boot-th-8.0.1@ghc-boot-th-8.0.1 ghc-prim-0.5.0.0
                      hashable-1.2.4.0@hashable-1.2.4.0-EMu4H7FB10MAl6hwKw992G
                      hashtables-1.2.1.0@hashtables-1.2.1.0-97BixhaJIWTIDAaThqJujl
                      hslogger-1.2.10@hslogger-1.2.10-AP286pNXV0SGj8OqgligRa
                      integer-gmp-1.0.0.1
                      lifted-base-0.2.3.8@lifted-base-0.2.3.8-KLkd0w1UJqu6nE8oVTTEBy
                      memory-0.13@memory-0.13-ABHR5331zHK9scHPRr7afU
                      mmorph-1.0.9@mmorph-1.0.9-DmSwQqk5nLj7roLAcydGz
                      monad-control-1.0.1.0@monad-control-1.0.1.0-HoNEBoNfniX3vjSfkI7WTT
                      mongoDB-2.1.1.1@mongoDB-2.1.1.1-670AA8wSYKM3E2IarObZ7
                      mtl-2.2.1@mtl-2.2.1-6qsR1PHUy5lL47Hpoa4jCM
                      network-2.6.3.1@network-2.6.3.1-G4Up1CPKbp7DeFsnywOnGG
                      nonce-1.0.2@nonce-1.0.2-187zSgt2OIA84d9i9xgwRX
                      parsec-3.1.11@parsec-3.1.11-BCos4GEVCuDB8dnOCBHO6X
                      primitive-0.6.1.0@primitive-0.6.1.0-Ip44DqhfCp21tTUYbecwa
                      random-1.1@random-1.1-54KmMHXjttlERYcr1mvsAe
                      random-shuffle-0.0.4@random-shuffle-0.0.4-LfeDYNPfwrQ2o9p6tw2M9l
                      resourcet-1.1.8.1@resourcet-1.1.8.1-1XWaZ7RmVde330DM5PRI3Z
                      securemem-0.1.9@securemem-0.1.9-AlUbMorzPNe4lwnV15ASIa
                      stm-2.4.4.1@stm-2.4.4.1-4z2NRWnB0NIIUvSJsHW0kF
                      template-haskell-2.11.0.0
                      text-1.2.2.1@text-1.2.2.1-5QpmrLQApEZ4Ly9nMHWY0s
                      time-1.6.0.1@time-1.6.0.1 transformers-0.5.2.0@transformers-0.5.2.0
                      transformers-base-0.4.4@transformers-base-0.4.4-25SoAegOdaF8rLEnnb5jPI
                      unix-2.7.2.0@unix-2.7.2.0
                      vector-0.11.0.0@vector-0.11.0.0-BEDZb5o2QOhGbIm6ky7rl6
orphans: MonadRandom-0.4.2.3@MonadRandom-0.4.2.3-8TfCm6PGvGYB7omozORhov:Control.Monad.Random
         base-4.9.0.0:GHC.Base base-4.9.0.0:GHC.Float
         binary-0.8.3.0@binary-0.8.3.0:Data.Binary.Generic
         bytestring-0.10.8.1@bytestring-0.10.8.1:Data.ByteString.Builder
         hashable-1.2.4.0@hashable-1.2.4.0-EMu4H7FB10MAl6hwKw992G:Data.Hashable.Generic
         mongoDB-2.1.1.1@mongoDB-2.1.1.1-670AA8wSYKM3E2IarObZ7:Database.MongoDB.Internal.Util
         network-2.6.3.1@network-2.6.3.1-G4Up1CPKbp7DeFsnywOnGG:Network.Socket
         stm-2.4.4.1@stm-2.4.4.1-4z2NRWnB0NIIUvSJsHW0kF:Control.Monad.STM
         text-1.2.2.1@text-1.2.2.1-5QpmrLQApEZ4Ly9nMHWY0s:Data.Text
         text-1.2.2.1@text-1.2.2.1-5QpmrLQApEZ4Ly9nMHWY0s:Data.Text.Lazy
         text-1.2.2.1@text-1.2.2.1-5QpmrLQApEZ4Ly9nMHWY0s:Data.Text.Show
         time-1.6.0.1@time-1.6.0.1:Data.Time.Calendar.Gregorian
         time-1.6.0.1@time-1.6.0.1:Data.Time.Format.Parse
         time-1.6.0.1@time-1.6.0.1:Data.Time.LocalTime.LocalTime
         transformers-0.5.2.0@transformers-0.5.2.0:Control.Monad.Trans.Error
         vector-0.11.0.0@vector-0.11.0.0-BEDZb5o2QOhGbIm6ky7rl6:Data.Vector.Fusion.Bundle
         vector-0.11.0.0@vector-0.11.0.0-BEDZb5o2QOhGbIm6ky7rl6:Data.Vector.Unboxed
family instance modules: base-4.9.0.0:Control.Applicative
                         base-4.9.0.0:Data.Complex base-4.9.0.0:Data.Either
                         base-4.9.0.0:Data.Functor.Compose base-4.9.0.0:Data.Functor.Const
                         base-4.9.0.0:Data.Functor.Identity
                         base-4.9.0.0:Data.Functor.Product base-4.9.0.0:Data.List.NonEmpty
                         base-4.9.0.0:Data.Monoid base-4.9.0.0:Data.Semigroup
                         base-4.9.0.0:Data.Type.Equality base-4.9.0.0:Data.Version
                         base-4.9.0.0:Data.Void base-4.9.0.0:GHC.Exts
                         base-4.9.0.0:GHC.Generics base-4.9.0.0:GHC.IO.Exception
                         base-4.9.0.0:GHC.TypeLits
                         containers-0.5.7.1@containers-0.5.7.1:Data.IntMap.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.IntSet.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.Map.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.Sequence
                         containers-0.5.7.1@containers-0.5.7.1:Data.Set.Base
                         ghc-boot-th-8.0.1@ghc-boot-th-8.0.1:GHC.LanguageExtensions.Type
                         monad-control-1.0.1.0@monad-control-1.0.1.0-HoNEBoNfniX3vjSfkI7WTT:Control.Monad.Trans.Control
                         primitive-0.6.1.0@primitive-0.6.1.0-Ip44DqhfCp21tTUYbecwa:Control.Monad.Primitive
                         resourcet-1.1.8.1@resourcet-1.1.8.1-1XWaZ7RmVde330DM5PRI3Z:Control.Monad.Trans.Resource.Internal
                         template-haskell-2.11.0.0:Language.Haskell.TH.Syntax
                         text-1.2.2.1@text-1.2.2.1-5QpmrLQApEZ4Ly9nMHWY0s:Data.Text
                         text-1.2.2.1@text-1.2.2.1-5QpmrLQApEZ4Ly9nMHWY0s:Data.Text.Lazy
                         vector-0.11.0.0@vector-0.11.0.0-BEDZb5o2QOhGbIm6ky7rl6:Data.Vector
                         vector-0.11.0.0@vector-0.11.0.0-BEDZb5o2QOhGbIm6ky7rl6:Data.Vector.Primitive
                         vector-0.11.0.0@vector-0.11.0.0-BEDZb5o2QOhGbIm6ky7rl6:Data.Vector.Unboxed
                         vector-0.11.0.0@vector-0.11.0.0-BEDZb5o2QOhGbIm6ky7rl6:Data.Vector.Unboxed.Base
import  -/  base-4.9.0.0:Control.Monad 7767aebfd53f0b584cef2fe66ad3986c
import  -/  base-4.9.0.0:Control.Monad.IO.Class d702028d883e700bd7066b031147030d
import  -/  base-4.9.0.0:Data.Foldable 8aeb682f6c74f97fcf0ace0d608a43ea
import  -/  base-4.9.0.0:GHC.Base 8ed3be81c0707b322f975a84ae1bb816
import  -/  base-4.9.0.0:GHC.Show 952347a6ab730bcb25c0854d8bc6ca51
import  -/  base-4.9.0.0:Prelude b9bddb97799837fe67a8d00939a5b6c3
import  -/  base-4.9.0.0:System.Environment ee0914a962f5508d0fd404c89ee4999b
import  -/  base-4.9.0.0:Text.Read 9c1be14f7e5eac8b18bcb566c5763677
import  -/  bson-0.3.2.3@bson-0.3.2.3-3QA3aP5EtCyCltXUzEKOsQ:Data.Bson 609b35b07f554dfa69c4b31dfeed380e
import  -/  ghc-prim-0.5.0.0:GHC.Types 7378e41b7749213c8c88ceb6b0665d4c
import  -/  hslogger-1.2.10@hslogger-1.2.10-AP286pNXV0SGj8OqgligRa:System.Log.Logger 8bdccaced1797bc095f61b9fb8f9bafe
import  -/  integer-gmp-1.0.0.1:GHC.Integer.Type 62c0e736506aac47ef40569f5b82e19d
import  -/  mongoDB-2.1.1.1@mongoDB-2.1.1.1-670AA8wSYKM3E2IarObZ7:Database.MongoDB 51032d9aef945992b915965f77c83c67
import  -/  mongoDB-2.1.1.1@mongoDB-2.1.1.1-670AA8wSYKM3E2IarObZ7:Database.MongoDB.Connection 18e01195c70d08fbb95678350ed222c0
import  -/  mongoDB-2.1.1.1@mongoDB-2.1.1.1-670AA8wSYKM3E2IarObZ7:Database.MongoDB.Internal.Protocol 332d11e73b2bccab8bdd815a3293bf65
import  -/  mongoDB-2.1.1.1@mongoDB-2.1.1.1-670AA8wSYKM3E2IarObZ7:Database.MongoDB.Query 6621c2dc22d8a7b068254f2e1b77627a
import  -/  resourcet-1.1.8.1@resourcet-1.1.8.1-1XWaZ7RmVde330DM5PRI3Z:Control.Monad.Trans.Resource 6add5f57c5a8580f3180b0380a45d977
import  -/  text-1.2.2.1@text-1.2.2.1-5QpmrLQApEZ4Ly9nMHWY0s:Data.Text 6515f3179e27a91345842b6e634f584c
import  -/  time-1.6.0.1@time-1.6.0.1:Data.Time.Clock b91051c7767d1f23314064be1d4311d7
import  -/  time-1.6.0.1@time-1.6.0.1:Data.Time.Clock.POSIX a0c5708011f4e3cb1d85608a99ae773a
import  -/  time-1.6.0.1@time-1.6.0.1:Data.Time.Clock.UTC fd9f3bc9549d9de1cb313e496610c238
import  -/  time-1.6.0.1@time-1.6.0.1:Data.Time.Format b6d4cc5df3f9159b1156baa52a254cf6
import  -/  time-1.6.0.1@time-1.6.0.1:Data.Time.Format.Locale 2ce8413933ae0199a4bf6c15ee5db27c
04f412472035f856583747eb80898abd
  $sread :: GHC.Base.String -> GHC.Integer.Type.Integer
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (s :: GHC.Base.String) ->
                 case Text.Read.readEither
                        @ GHC.Integer.Type.Integer
                        GHC.Read.$fReadInteger
                        s of wild {
                   Data.Either.Left x
                   -> GHC.Err.errorWithoutStackTrace
                        @ 'GHC.Types.PtrRepLifted
                        @ GHC.Integer.Type.Integer
                        x
                   Data.Either.Right y -> y }) -}
7b76d2d52a586ec911aefff77637448d
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module
                   MongoFunctions.$trModule2
                   MongoFunctions.$trModule1) -}
fe4d5d07062fea27a9d83e8ef2b813ea
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "MongoFunctions"#) -}
4ba6d18691e06238e3aa4be106b2e301
  $trModule2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   "commonAPIs-0.1.0.0-HG5f3m8j2i08xkd4uhISM"#) -}
d90b2205bbcdc3ed6b7ade1264b13826
  $wouter ::
    Data.Text.Array.MArray GHC.Prim.RealWorld
    -> GHC.Types.Int
    -> [GHC.Types.Char]
    -> GHC.Prim.Int#
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Text.Internal.Text #)
  {- Arity: 5, Strictness: <L,U(U)><L,U(U)><S,1*U><S,U><S,U>,
     Inline: [0] -}
0eb5706398c1f9093921728b9632620d
  defEnv ::
    GHC.Show.Show a =>
    GHC.Base.String
    -> (GHC.Base.String -> a) -> a -> GHC.Types.Bool -> GHC.Types.IO a
  {- Arity: 6, Strictness: <L,A><L,U><L,1*C1(U)><L,U><L,A><S,U>,
     Unfolding: InlineRule (0, True, True)
                MongoFunctions.defEnv1
                  `cast`
                (forall (a :: <*>_N).
                 <GHC.Show.Show a>_R
                 ->_R <GHC.Base.String>_R
                 ->_R <GHC.Base.String -> a>_R
                 ->_R <a>_R
                 ->_R <GHC.Types.Bool>_R
                 ->_R Sym (GHC.Types.N:IO[0] <a>_R)) -}
43ae3e5ab9a290cca6e25378d19cc8d4
  defEnv1 ::
    GHC.Show.Show a =>
    GHC.Base.String
    -> (GHC.Base.String -> a)
    -> a
    -> GHC.Types.Bool
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, a #)
  {- Arity: 6, Strictness: <L,A><L,U><L,1*C1(U)><L,U><L,A><S,U>,
     Unfolding: InlineRule (6, True, False)
                (\ @ a
                   ($dShow :: GHC.Show.Show a)
                   (env :: GHC.Base.String)
                   (fn :: GHC.Base.String -> a)
                   (def :: a)
                   (doWarn :: GHC.Types.Bool)
                   (eta :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case GHC.IO.Encoding.getForeignEncoding1 of wild { (,) getForeignEncoding5 setForeignEncoding1 ->
                 case getForeignEncoding5
                        `cast`
                      (GHC.Types.N:IO[0] <GHC.IO.Encoding.Types.TextEncoding>_R)
                        eta of ds1 { (#,#) ipv ipv1 ->
                 case GHC.Foreign.charIsRepresentable3
                        @ (GHC.Base.Maybe GHC.Base.String)
                        ipv1
                        env
                        System.Environment.getEnv4
                          `cast`
                        (<Foreign.C.String.CString>_R
                         ->_R Sym (GHC.Types.N:IO[0] <GHC.Base.Maybe GHC.Base.String>_R))
                        ipv of ds2 { (#,#) ipv2 ipv3 ->
                 case ipv3 of wild1 {
                   GHC.Base.Nothing -> (# ipv2, def #)
                   GHC.Base.Just s -> (# ipv2, fn s #) } } } }) -}
6456790a7ad981181b1d1bb5b0d03346
  doLog ::
    (GHC.Base.String -> [GHC.Types.Char] -> GHC.Types.IO b)
    -> [GHC.Types.Char] -> GHC.Types.IO b
  {- Arity: 3, Strictness: <L,1*C1(C1(C1(U(U,U))))><L,U><S,U>,
     Unfolding: InlineRule (0, True, True)
                MongoFunctions.doLog1
                  `cast`
                (forall (b :: <*>_N).
                 <GHC.Base.String -> [GHC.Types.Char] -> GHC.Types.IO b>_R
                 ->_R <[GHC.Types.Char]>_R
                 ->_R Sym (GHC.Types.N:IO[0] <b>_R)) -}
e0020603843e843a3740622c9ea19869
  doLog1 ::
    (GHC.Base.String -> [GHC.Types.Char] -> GHC.Types.IO b)
    -> [GHC.Types.Char]
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, b #)
  {- Arity: 3, Strictness: <L,1*C1(C1(C1(U(U,U))))><L,U><S,U>,
     Unfolding: (\ @ b
                   (f :: GHC.Base.String -> [GHC.Types.Char] -> GHC.Types.IO b)
                   (s :: [GHC.Types.Char])
                   (eta :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case System.Environment.getProgName1 eta of ds1 { (#,#) ipv ipv1 ->
                 case Data.Time.Clock.CTimeval.getCTimeval1
                        ipv of ds { (#,#) ipv2 ipv3 ->
                 (f ipv1
                    (GHC.Base.++
                       @ GHC.Types.Char
                       (Data.Time.Format.formatTime
                          @ Data.Time.Clock.UTC.UTCTime
                          Data.Time.Format.$fFormatTimeUTCTime_$cformatCharacter
                            `cast`
                          (Sym (Data.Time.Format.N:FormatTime[0]
                                    <Data.Time.Clock.UTC.UTCTime>_N))
                          Data.Time.Format.Locale.defaultTimeLocale
                          MongoFunctions.doLog2
                          (case Data.Time.Clock.POSIX.$wposixSecondsToUTCTime
                                  (Data.Time.Clock.POSIX.getCurrentTime2
                                     ipv3) of ww { (#,#) ww1 ww2 ->
                           Data.Time.Clock.UTC.UTCTime ww1 ww2 }))
                       (GHC.CString.unpackAppendCString# " "# s)))
                   `cast`
                 (GHC.Types.N:IO[0] <b>_R)
                   ipv2 } }) -}
d43b7134fa48d0d4e1a2fa9b01b09e0d
  doLog2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "%FT%T%q%z"#) -}
ebd03c40735791ee376d8e37ba5f3ee7
  drainCursor ::
    Database.MongoDB.Query.Cursor
    -> Database.MongoDB.Query.Action GHC.Types.IO [Data.Bson.Document]
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (cur :: Database.MongoDB.Query.Cursor) ->
                 MongoFunctions.drainCursor_drainCursor'
                   cur
                   (GHC.Types.[] @ Data.Bson.Document)) -}
4e50c3960df90af53a1f885b81b79069
  drainCursor_drainCursor' ::
    Database.MongoDB.Query.Cursor
    -> [Data.Bson.Document]
    -> Control.Monad.Trans.Reader.ReaderT
         Database.MongoDB.Query.MongoContext
         GHC.Types.IO
         [Data.Bson.Document]
  {- Arity: 2, Strictness: <L,U><L,U> -}
0d214de8581f733d201db4354fe12696
  iso8601 :: Data.Time.Clock.UTC.UTCTime -> GHC.Base.String
  {- Arity: 1,
     Unfolding: (Data.Time.Format.formatTime
                   @ Data.Time.Clock.UTC.UTCTime
                   Data.Time.Format.$fFormatTimeUTCTime_$cformatCharacter
                     `cast`
                   (Sym (Data.Time.Format.N:FormatTime[0]
                             <Data.Time.Clock.UTC.UTCTime>_N))
                   Data.Time.Format.Locale.defaultTimeLocale
                   MongoFunctions.doLog2) -}
cc5af5a3ba4b45ff70c45d38a922198b
  mongoDbDatabase :: GHC.Types.IO GHC.Base.String
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: InlineRule (0, True, True)
                MongoFunctions.mongoDbDatabase1
                  `cast`
                (Sym (GHC.Types.N:IO[0] <[GHC.Types.Char]>_R)) -}
8e4a8da0a8976cba70b5ff46ee2b762f
  mongoDbDatabase1 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, [GHC.Types.Char] #)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (eta :: GHC.Prim.State#
                             GHC.Prim.RealWorld)[OneShot] ->
                 case GHC.IO.Encoding.getForeignEncoding1 of wild { (,) getForeignEncoding5 setForeignEncoding1 ->
                 case getForeignEncoding5
                        `cast`
                      (GHC.Types.N:IO[0] <GHC.IO.Encoding.Types.TextEncoding>_R)
                        eta of ds1 { (#,#) ipv ipv1 ->
                 case GHC.Foreign.charIsRepresentable3
                        @ (GHC.Base.Maybe GHC.Base.String)
                        ipv1
                        MongoFunctions.mongoDbDatabase3
                        System.Environment.getEnv4
                          `cast`
                        (<Foreign.C.String.CString>_R
                         ->_R Sym (GHC.Types.N:IO[0] <GHC.Base.Maybe GHC.Base.String>_R))
                        ipv of ds2 { (#,#) ipv2 ipv3 ->
                 case ipv3 of wild1 {
                   GHC.Base.Nothing -> (# ipv2, MongoFunctions.mongoDbDatabase2 #)
                   GHC.Base.Just s -> (# ipv2, s #) } } } }) -}
ed868b04e6fe1718cb8f46ce8504453c
  mongoDbDatabase2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "mongoFiles"#) -}
382a637b4c5d87c4626a282884701611
  mongoDbDatabase3 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "MONGODB_DATABASE"#) -}
2f5b93c39564f36031ebb65cac722931
  mongoDbIp :: GHC.Types.IO GHC.Base.String
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: InlineRule (0, True, True)
                MongoFunctions.mongoDbIp1
                  `cast`
                (Sym (GHC.Types.N:IO[0] <[GHC.Types.Char]>_R)) -}
4c704895a602bb56883ad0535dafad75
  mongoDbIp1 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, [GHC.Types.Char] #)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (eta :: GHC.Prim.State#
                             GHC.Prim.RealWorld)[OneShot] ->
                 case GHC.IO.Encoding.getForeignEncoding1 of wild { (,) getForeignEncoding5 setForeignEncoding1 ->
                 case getForeignEncoding5
                        `cast`
                      (GHC.Types.N:IO[0] <GHC.IO.Encoding.Types.TextEncoding>_R)
                        eta of ds1 { (#,#) ipv ipv1 ->
                 case GHC.Foreign.charIsRepresentable3
                        @ (GHC.Base.Maybe GHC.Base.String)
                        ipv1
                        MongoFunctions.mongoDbIp3
                        System.Environment.getEnv4
                          `cast`
                        (<Foreign.C.String.CString>_R
                         ->_R Sym (GHC.Types.N:IO[0] <GHC.Base.Maybe GHC.Base.String>_R))
                        ipv of ds2 { (#,#) ipv2 ipv3 ->
                 case ipv3 of wild1 {
                   GHC.Base.Nothing -> (# ipv2, MongoFunctions.mongoDbIp2 #)
                   GHC.Base.Just s -> (# ipv2, s #) } } } }) -}
c9641471088c3fa7c894e51291cc7439
  mongoDbIp2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "localhost"#) -}
8c9b3cd5180281a684bfd6afbba709bb
  mongoDbIp3 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "MONGODB_IP"#) -}
64af119edb4c34092cc836d087e8256f
  mongoDbPort :: GHC.Types.IO GHC.Integer.Type.Integer
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: InlineRule (0, True, True)
                MongoFunctions.mongoDbPort1
                  `cast`
                (Sym (GHC.Types.N:IO[0] <GHC.Integer.Type.Integer>_R)) -}
4c6867143ed0967f5787e95982aee146
  mongoDbPort1 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          GHC.Integer.Type.Integer #)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (eta :: GHC.Prim.State#
                             GHC.Prim.RealWorld)[OneShot] ->
                 case GHC.IO.Encoding.getForeignEncoding1 of wild { (,) getForeignEncoding5 setForeignEncoding1 ->
                 case getForeignEncoding5
                        `cast`
                      (GHC.Types.N:IO[0] <GHC.IO.Encoding.Types.TextEncoding>_R)
                        eta of ds1 { (#,#) ipv ipv1 ->
                 case GHC.Foreign.charIsRepresentable3
                        @ (GHC.Base.Maybe GHC.Base.String)
                        ipv1
                        MongoFunctions.mongoDbPort3
                        System.Environment.getEnv4
                          `cast`
                        (<Foreign.C.String.CString>_R
                         ->_R Sym (GHC.Types.N:IO[0] <GHC.Base.Maybe GHC.Base.String>_R))
                        ipv of ds2 { (#,#) ipv2 ipv3 ->
                 case ipv3 of wild1 {
                   GHC.Base.Nothing -> (# ipv2, MongoFunctions.mongoDbPort2 #)
                   GHC.Base.Just s -> (# ipv2, MongoFunctions.$sread s #) } } } }) -}
2acd4ee5ea81eec32eec8c0b45ef6d50
  mongoDbPort2 :: GHC.Integer.Type.Integer
  {- HasNoCafRefs, Unfolding: (27017) -}
d97eed32439934a6bddadbe03d52524f
  mongoDbPort3 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "MONGODB_PORT"#) -}
2c641ecab191884efcf01453f253c2f0
  withMongoDbConnection ::
    Database.MongoDB.Query.Action GHC.Types.IO a -> GHC.Types.IO a
  {- Arity: 2, Strictness: <L,1*C1(U)><S,U>,
     Unfolding: InlineRule (0, True, True)
                MongoFunctions.withMongoDbConnection1
                  `cast`
                (forall (a :: <*>_N).
                 <Database.MongoDB.Query.Action GHC.Types.IO a>_R
                 ->_R Sym (GHC.Types.N:IO[0] <a>_R)) -}
0d2dd07f8404927ec216c0f226a892bb
  withMongoDbConnection1 ::
    Database.MongoDB.Query.Action GHC.Types.IO a
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, a #)
  {- Arity: 2, Strictness: <L,1*C1(U)><S,U>,
     Unfolding: (\ @ a
                   (act :: Database.MongoDB.Query.Action GHC.Types.IO a)
                   (eta :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case GHC.IO.Encoding.getForeignEncoding1 of wild { (,) getForeignEncoding5 setForeignEncoding1 ->
                 case getForeignEncoding5
                        `cast`
                      (GHC.Types.N:IO[0] <GHC.IO.Encoding.Types.TextEncoding>_R)
                        eta of ds1 { (#,#) ipv ipv1 ->
                 case GHC.Foreign.charIsRepresentable3
                        @ (GHC.Base.Maybe GHC.Base.String)
                        ipv1
                        MongoFunctions.mongoDbIp3
                        System.Environment.getEnv4
                          `cast`
                        (<Foreign.C.String.CString>_R
                         ->_R Sym (GHC.Types.N:IO[0] <GHC.Base.Maybe GHC.Base.String>_R))
                        ipv of ds2 { (#,#) ipv2 ipv3 ->
                 let {
                   $j :: GHC.Prim.State# GHC.Prim.RealWorld
                         -> GHC.Base.String -> (# GHC.Prim.State# GHC.Prim.RealWorld, a #)
                     {- Arity: 2, Strictness: <S,U><L,U> -}
                   = \ (ipv4 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot]
                       (ipv5 :: GHC.Base.String)[OneShot] ->
                     case getForeignEncoding5
                            `cast`
                          (GHC.Types.N:IO[0] <GHC.IO.Encoding.Types.TextEncoding>_R)
                            ipv4 of ds3 { (#,#) ipv6 ipv7 ->
                     case GHC.Foreign.charIsRepresentable3
                            @ (GHC.Base.Maybe GHC.Base.String)
                            ipv7
                            MongoFunctions.mongoDbPort3
                            System.Environment.getEnv4
                              `cast`
                            (<Foreign.C.String.CString>_R
                             ->_R Sym (GHC.Types.N:IO[0] <GHC.Base.Maybe GHC.Base.String>_R))
                            ipv6 of ds4 { (#,#) ipv8 ipv9 ->
                     case ipv9 of wild1 { DEFAULT ->
                     case getForeignEncoding5
                            `cast`
                          (GHC.Types.N:IO[0] <GHC.IO.Encoding.Types.TextEncoding>_R)
                            ipv8 of ds5 { (#,#) ipv10 ipv11 ->
                     case GHC.Foreign.charIsRepresentable3
                            @ (GHC.Base.Maybe GHC.Base.String)
                            ipv11
                            MongoFunctions.mongoDbDatabase3
                            System.Environment.getEnv4
                              `cast`
                            (<Foreign.C.String.CString>_R
                             ->_R Sym (GHC.Types.N:IO[0] <GHC.Base.Maybe GHC.Base.String>_R))
                            ipv10 of ds6 { (#,#) ipv12 ipv13 ->
                     let {
                       $j1 :: GHC.Prim.State# GHC.Prim.RealWorld
                              -> GHC.Base.String -> (# GHC.Prim.State# GHC.Prim.RealWorld, a #)
                         {- Arity: 2, Strictness: <S,U><L,1*U> -}
                       = \ (ipv14 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot]
                           (ipv15 :: GHC.Base.String)[OneShot] ->
                         case Database.MongoDB.Connection.globalConnectTimeout
                                `cast`
                              (GHC.IORef.N:IORef[0] <Database.MongoDB.Connection.Secs>_N) of wild2 { GHC.STRef.STRef var# ->
                         case GHC.Prim.readMutVar#
                                @ GHC.Prim.RealWorld
                                @ Database.MongoDB.Connection.Secs
                                var#
                                ipv14 of ds7 { (#,#) ipv16 ipv17 ->
                         case ipv17 of ww { GHC.Types.D# ww1 ->
                         case Database.MongoDB.Connection.$wconnect'
                                ww1
                                ipv5
                                Database.MongoDB.Connection.defaultPort
                                ipv16 of ds8 { (#,#) ipv18 ipv19 ->
                         case (Control.Monad.Trans.Resource.runResourceT
                                 @ GHC.Types.IO
                                 @ a
                                 Control.Monad.Trans.Control.$fMonadBaseControlIOIO
                                 (let {
                                    eta1 :: GHC.Types.IO a
                                    = act
                                        `cast`
                                      (Control.Monad.Trans.Reader.N:ReaderT[0]
                                           <*>_N
                                           <Database.MongoDB.Query.MongoContext>_R
                                           <GHC.Types.IO>_R
                                           <a>_N)
                                        (Database.MongoDB.Query.MongoContext
                                           ipv19
                                           Database.MongoDB.Query.master
                                           (case GHC.Magic.runRW#
                                                   @ 'GHC.Types.PtrRepLifted
                                                   @ Data.Text.Internal.Text
                                                   (\ (s1 :: GHC.Prim.State#
                                                               GHC.Prim.RealWorld)[OneShot] ->
                                                    case GHC.Prim.newByteArray#
                                                           @ GHC.Prim.RealWorld
                                                           8#
                                                           s1 of ds9 { (#,#) ipv20 ipv21 ->
                                                    MongoFunctions.$wouter
                                                      (Data.Text.Array.MArray
                                                         @ GHC.Prim.RealWorld
                                                         ipv21)
                                                      MongoFunctions.withMongoDbConnection3
                                                      ipv15
                                                      0#
                                                      ipv20 }) of ds9 { (#,#) ipv20 ipv21 ->
                                            ipv21 }))
                                  } in
                                  (\ (ds :: GHC.IORef.IORef
                                              Control.Monad.Trans.Resource.Internal.ReleaseMap) ->
                                   eta1)
                                    `cast`
                                  (Sym (Control.Monad.Trans.Resource.Internal.N:ResourceT[0]
                                            <GHC.Types.IO>_R <a>_N))))
                                `cast`
                              (GHC.Types.N:IO[0] <a>_R)
                                ipv18 of ds9 { (#,#) ipv20 ipv21 ->
                         case ipv19 of wild3 { Database.MongoDB.Internal.Protocol.Pipeline ds10 ds11 ds12 ds13 ->
                         case ds12 of wild4 { GHC.Conc.Sync.ThreadId tid1 ->
                         case GHC.Prim.killThread#
                                @ GHC.Exception.SomeException
                                tid1
                                MongoFunctions.withMongoDbConnection2
                                ipv20 of s1 { DEFAULT ->
                         case ds10 of wild5 { GHC.MVar.MVar mvar# ->
                         case GHC.Prim.readMVar#
                                @ GHC.Prim.RealWorld
                                @ Database.MongoDB.Transport.Transport
                                mvar#
                                s1 of ds14 { (#,#) ipv22 ipv23 ->
                         case ipv23 of wild6 { Database.MongoDB.Transport.Transport ds15 ds16 ds17 ds18 ->
                         case ds18 `cast` (GHC.Types.N:IO[0] <()>_R)
                                ipv22 of ds19 { (#,#) ipv24 ipv25 ->
                         (# ipv24, ipv21 #) } } } } } } } } } } } }
                     } in
                     case ipv13 of wild2 {
                       GHC.Base.Nothing -> $j1 ipv12 MongoFunctions.mongoDbDatabase2
                       GHC.Base.Just s -> $j1 ipv12 s } } } } } }
                 } in
                 case ipv3 of wild1 {
                   GHC.Base.Nothing -> $j ipv2 MongoFunctions.mongoDbIp2
                   GHC.Base.Just s -> $j ipv2 s } } } }) -}
d510fa761bc5dcdf7825bfd44637db2a
  withMongoDbConnection2 :: GHC.Exception.SomeException
  {- Unfolding: (GHC.IO.Exception.$fExceptionAsyncException_$ctoException
                   GHC.IO.Exception.ThreadKilled) -}
3942089bc2a6ff6b37bfa2323bddc99b
  withMongoDbConnection3 :: GHC.Types.Int
  {- HasNoCafRefs, Unfolding: (GHC.Types.I# 4#) -}
"SPEC/MongoFunctions read @ Integer" [ALWAYS] forall ($dRead :: GHC.Read.Read
                                                                  GHC.Integer.Type.Integer)
  Text.Read.read @ GHC.Integer.Type.Integer $dRead
  = MongoFunctions.$sread
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: none
require own pkg trusted: False

